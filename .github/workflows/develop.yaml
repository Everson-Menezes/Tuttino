name: 2 - [Develop] Deploy to Development Environment

on:
  pull_request:
    types: [closed]
    branches: [develop]

jobs:
  filter:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read

    outputs:
      backend_changed: ${{ steps.filter.outputs.backend }}
      infra_changed: ${{ steps.filter.outputs.infra }}

    steps:
      - name: 📥 Checkout source
        uses: actions/checkout@v4

      - name: 📂 Check changed paths
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            backend:
              - 'backend/**'
            infra:
              - 'infra/**'

  diagnose-runner:
    needs: filter
    if: >
      github.event.pull_request.merged == true &&
      (needs.filter.outputs.infra_changed == 'true' || needs.filter.outputs.backend_changed == 'true')
    runs-on: self-hosted
    name: Diagnose Self-Hosted Runner
    steps:
      - name: Print date/time
        run: date

      - name: Show runner user and permissions
        run: |
          whoami
          id
          groups
          echo "HOME=$HOME"
          echo "SHELL=$SHELL"
          echo "PWD=$PWD"
          ls -ld $PWD

      - name: System Info
        run: |
          uname -a
          lsb_release -a || cat /etc/os-release || echo "No OS info"
          uptime
          df -h
          free -m

      - name: Docker info
        run: |
          docker version
          docker info
          docker ps -a
          docker images
          docker network ls

      - name: Network info
        run: |
          ip addr show
          ip route show
          cat /etc/resolv.conf
          netstat -tulpen || ss -tulpen

      - name: Check self-hosted runner logs and status (Linux systemd)
        run: |
          sudo systemctl status actions.runner.* || echo "No systemd service found"
          sudo journalctl -u actions.runner.* --since "1 hour ago" --no-pager || echo "No logs available"

      - name: Check resource usage
        run: |
          ps aux --sort=-%mem | head -n 10
          ps aux --sort=-%cpu | head -n 10
          free -h

      - name: Test network connectivity
        run: |
          ping -c 3 8.8.8.8 || echo "Ping failed"
          curl -sI http://localhost:8000 || echo "Curl to localhost failed"

      - name: Environment variables
        run: env | sort

      - name: List directory and files with permissions
        run: ls -la $PWD

      - name: List docker-compose files (if any)
        run: |
          find $PWD -maxdepth 2 -name "docker-compose*.yml" -o -name "docker-compose*.yaml" || echo "No docker-compose files found"

  merge-validation:
    needs:
      - filter
      - diagnose-runner
    if: >
      github.event.pull_request.merged == true &&
      startsWith(github.event.pull_request.head.ref, 'feature/') &&
      (needs.filter.outputs.infra_changed == 'true' || needs.filter.outputs.backend_changed == 'true')
    runs-on: self-hosted
    steps:
      - name: 📥 Checkout source
        uses: actions/checkout@v4

      - name: 🧹 Cleanup old Docker containers and network
        run: |
          docker rm -f tuttino-postgres tuttino-backend tuttino-nginx || true
          docker network rm tuttino_net || true

      - name: 🐳 Create Docker network if missing
        run: docker network create tuttino_net || true

      - name: 🧰 Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: ⚙️ Terraform Init
        run: terraform -chdir=infra init

      - name: 🔍 Terraform Plan
        run: terraform -chdir=infra plan

      - name: 🚀 Terraform Apply
        run: terraform -chdir=infra apply -auto-approve

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Cache Docker layers (backend)
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-backend-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-backend-

      - name: 🐳 Build Backend Image with Cache
        run: |
          docker build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            -t tuttino-backend:latest \
            -f backend/dockerfile backend
